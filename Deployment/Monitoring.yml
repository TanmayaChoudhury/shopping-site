# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- manual

variables:
  - group: environment-variables
  - group: key-vault

stages:
              
  - stage: Monitoring
    displayName: Monitoring
    pool:
        name: '$(vmImageName)'
        demands:
          - Agent.Name -equals $(AgentName)
    jobs:
      - job: InstallMonitoring
        displayName: "Install Prometheus & Grafana"
        pool:
         name: '$(vmImageName)'
         demands:
           - Agent.Name -equals $(AgentName)
        steps:
          
          - task: KubectlInstaller@0
            displayName: 'Kubectl Installer'
            inputs:
              kubectlVersion: 'latest'


          - task: replacetokens@6
            displayName: Replacing Variables in Manifest Files
            inputs:
              root: '$(System.DefaultWorkingDirectory)/k8s'
              sources: '**/*.yaml'
              tokenPattern: 'custom'
              tokenPrefix: '${'
              tokenSuffix: '}'


          - task: HelmInstaller@1
            displayName: "Installing Helm"
            inputs:
              helmVersionToInstall: 'latest'


          - task: HelmDeploy@1
            displayName: "Install kube-prometheus-stack"
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: 'Azure-Devops'
              azureResourceGroup: 'aks-rg'
              kubernetesCluster: 'Tanmaya-portfolio-aks-cluster'
              useClusterAdmin: true
              command: 'upgrade'
              chartType: 'Name'
              chartName: 'prometheus-community/kube-prometheus-stack'
              releaseName: 'kind-prometheus'
              namespace: 'default'
              install: true
              arguments: >-
                --set prometheus.service.type=ClusterIP
                --set grafana.service.type=LoadBalancer
                --set grafana.adminPassword=$(grafana)
                --wait


